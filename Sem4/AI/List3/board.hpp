#ifndef BOARD_HPP
#define BOARD_HPP

#include <cmath>

short board[5][5] = {
    {0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0}
};

constexpr short win[28][4][2] = {
  { {0, 0}, {0, 1}, {0, 2}, {0, 3} },
  { {1, 0}, {1, 1}, {1, 2}, {1, 3} },
  { {2, 0}, {2, 1}, {2, 2}, {2, 3} },
  { {3, 0}, {3, 1}, {3, 2}, {3, 3} },
  { {4, 0}, {4, 1}, {4, 2}, {4, 3} },
  { {0, 1}, {0, 2}, {0, 3}, {0, 4} },
  { {1, 1}, {1, 2}, {1, 3}, {1, 4} },
  { {2, 1}, {2, 2}, {2, 3}, {2, 4} },
  { {3, 1}, {3, 2}, {3, 3}, {3, 4} },
  { {4, 1}, {4, 2}, {4, 3}, {4, 4} },
  { {0, 0}, {1, 0}, {2, 0}, {3, 0} },
  { {0, 1}, {1, 1}, {2, 1}, {3, 1} },
  { {0, 2}, {1, 2}, {2, 2}, {3, 2} },
  { {0, 3}, {1, 3}, {2, 3}, {3, 3} },
  { {0, 4}, {1, 4}, {2, 4}, {3, 4} },
  { {1, 0}, {2, 0}, {3, 0}, {4, 0} },
  { {1, 1}, {2, 1}, {3, 1}, {4, 1} },
  { {1, 2}, {2, 2}, {3, 2}, {4, 2} },
  { {1, 3}, {2, 3}, {3, 3}, {4, 3} },
  { {1, 4}, {2, 4}, {3, 4}, {4, 4} },
  { {0, 1}, {1, 2}, {2, 3}, {3, 4} },
  { {0, 0}, {1, 1}, {2, 2}, {3, 3} },
  { {1, 1}, {2, 2}, {3, 3}, {4, 4} },
  { {1, 0}, {2, 1}, {3, 2}, {4, 3} },
  { {0, 3}, {1, 2}, {2, 1}, {3, 0} },
  { {0, 4}, {1, 3}, {2, 2}, {3, 1} },
  { {1, 3}, {2, 2}, {3, 1}, {4, 0} },
  { {1, 4}, {2, 3}, {3, 2}, {4, 1} }
};

constexpr short lose[48][3][2] = {
  { {0, 0}, {0, 1}, {0, 2} }, { {0, 1}, {0, 2}, {0, 3} }, { {0, 2}, {0, 3}, {0, 4} },
  { {1, 0}, {1, 1}, {1, 2} }, { {1, 1}, {1, 2}, {1, 3} }, { {1, 2}, {1, 3}, {1, 4} },
  { {2, 0}, {2, 1}, {2, 2} }, { {2, 1}, {2, 2}, {2, 3} }, { {2, 2}, {2, 3}, {2, 4} },
  { {3, 0}, {3, 1}, {3, 2} }, { {3, 1}, {3, 2}, {3, 3} }, { {3, 2}, {3, 3}, {3, 4} },
  { {4, 0}, {4, 1}, {4, 2} }, { {4, 1}, {4, 2}, {4, 3} }, { {4, 2}, {4, 3}, {4, 4} },
  { {0, 0}, {1, 0}, {2, 0} }, { {1, 0}, {2, 0}, {3, 0} }, { {2, 0}, {3, 0}, {4, 0} },
  { {0, 1}, {1, 1}, {2, 1} }, { {1, 1}, {2, 1}, {3, 1} }, { {2, 1}, {3, 1}, {4, 1} },
  { {0, 2}, {1, 2}, {2, 2} }, { {1, 2}, {2, 2}, {3, 2} }, { {2, 2}, {3, 2}, {4, 2} },
  { {0, 3}, {1, 3}, {2, 3} }, { {1, 3}, {2, 3}, {3, 3} }, { {2, 3}, {3, 3}, {4, 3} },
  { {0, 4}, {1, 4}, {2, 4} }, { {1, 4}, {2, 4}, {3, 4} }, { {2, 4}, {3, 4}, {4, 4} },
  { {0, 2}, {1, 3}, {2, 4} }, { {0, 1}, {1, 2}, {2, 3} }, { {1, 2}, {2, 3}, {3, 4} },
  { {0, 0}, {1, 1}, {2, 2} }, { {1, 1}, {2, 2}, {3, 3} }, { {2, 2}, {3, 3}, {4, 4} },
  { {1, 0}, {2, 1}, {3, 2} }, { {2, 1}, {3, 2}, {4, 3} }, { {2, 0}, {3, 1}, {4, 2} },
  { {0, 2}, {1, 1}, {2, 0} }, { {0, 3}, {1, 2}, {2, 1} }, { {1, 2}, {2, 1}, {3, 0} },
  { {0, 4}, {1, 3}, {2, 2} }, { {1, 3}, {2, 2}, {3, 1} }, { {2, 2}, {3, 1}, {4, 0} },
  { {1, 4}, {2, 3}, {3, 2} }, { {2, 3}, {3, 2}, {4, 1} }, { {2, 4}, {3, 3}, {4, 2} }
};

inline bool winCheck(int player) {
  bool w = false;
  for (int i = 0; i < 28; i++)
    if ( (board[win[i][0][0]][win[i][0][1]] == player) &&
         (board[win[i][1][0]][win[i][1][1]] == player) &&
         (board[win[i][2][0]][win[i][2][1]] == player) &&
         (board[win[i][3][0]][win[i][3][1]] == player) )
      w = true;
  return w;
}

inline bool loseCheck(int player) {
  bool l = false;
  for (int i = 0; i < 48; i++)
    if ( (board[lose[i][0][0]][lose[i][0][1]] == player) &&
         (board[lose[i][1][0]][lose[i][1][1]] == player) &&
         (board[lose[i][2][0]][lose[i][2][1]] == player) )
      l = true;
  return l;
}

inline int evaluate_board() {
  int score = 0;
  short X, O;
  for(int i = 0; i < 28; i++) { // possible 4s
    X = 0; O = 0;
    if(board[win[i][1][0]][win[i][1][1]] != 0 &&  // ignore _XX_
       board[win[i][2][0]][win[i][2][1]] != 0) {
      continue;
    }
    for(int j = 0; j < 4; j++) {
      if(board[win[i][j][0]][win[i][j][1]] == 1) X += 1;
      if(board[win[i][j][0]][win[i][j][1]] == 2) O += 1;
    }
    score += (X && !O) ? std::pow(10, X) : ((!X && O) ? -std::pow(10, O) : 0);
  }
  for(int i = 0; i < 48; ++i) {
    X = 0; O = 0;
    for(int j = 0; j < 3; j++) {
      if(board[lose[i][j][0]][lose[i][j][1]] == 1) X += 1;
      if(board[lose[i][j][0]][lose[i][j][1]] == 2) O += 1;
    }
    score += (X == 2 && !O) ? -25 : ((!X && O == 2) ? 25 : 0);
  }
  return score;
}

#endif // BOARD_HPP