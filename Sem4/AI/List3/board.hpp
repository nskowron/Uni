#ifndef BOARD_HPP
#define BOARD_HPP

short board[5][5] = {
    {0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0},
    {0, 0, 0, 0, 0}
};

constexpr short win[28][4][2] = {
  { {0, 0}, {0, 1}, {0, 2}, {0, 3} },
  { {1, 0}, {1, 1}, {1, 2}, {1, 3} },
  { {2, 0}, {2, 1}, {2, 2}, {2, 3} },
  { {3, 0}, {3, 1}, {3, 2}, {3, 3} },
  { {4, 0}, {4, 1}, {4, 2}, {4, 3} },
  { {0, 1}, {0, 2}, {0, 3}, {0, 4} },
  { {1, 1}, {1, 2}, {1, 3}, {1, 4} },
  { {2, 1}, {2, 2}, {2, 3}, {2, 4} },
  { {3, 1}, {3, 2}, {3, 3}, {3, 4} },
  { {4, 1}, {4, 2}, {4, 3}, {4, 4} },
  { {0, 0}, {1, 0}, {2, 0}, {3, 0} },
  { {0, 1}, {1, 1}, {2, 1}, {3, 1} },
  { {0, 2}, {1, 2}, {2, 2}, {3, 2} },
  { {0, 3}, {1, 3}, {2, 3}, {3, 3} },
  { {0, 4}, {1, 4}, {2, 4}, {3, 4} },
  { {1, 0}, {2, 0}, {3, 0}, {4, 0} },
  { {1, 1}, {2, 1}, {3, 1}, {4, 1} },
  { {1, 2}, {2, 2}, {3, 2}, {4, 2} },
  { {1, 3}, {2, 3}, {3, 3}, {4, 3} },
  { {1, 4}, {2, 4}, {3, 4}, {4, 4} },
  { {0, 1}, {1, 2}, {2, 3}, {3, 4} },
  { {0, 0}, {1, 1}, {2, 2}, {3, 3} },
  { {1, 1}, {2, 2}, {3, 3}, {4, 4} },
  { {1, 0}, {2, 1}, {3, 2}, {4, 3} },
  { {0, 3}, {1, 2}, {2, 1}, {3, 0} },
  { {0, 4}, {1, 3}, {2, 2}, {3, 1} },
  { {1, 3}, {2, 2}, {3, 1}, {4, 0} },
  { {1, 4}, {2, 3}, {3, 2}, {4, 1} }
};

constexpr short lose[48][3][2] = {
  { {0, 0}, {0, 1}, {0, 2} }, { {0, 1}, {0, 2}, {0, 3} }, { {0, 2}, {0, 3}, {0, 4} },
  { {1, 0}, {1, 1}, {1, 2} }, { {1, 1}, {1, 2}, {1, 3} }, { {1, 2}, {1, 3}, {1, 4} },
  { {2, 0}, {2, 1}, {2, 2} }, { {2, 1}, {2, 2}, {2, 3} }, { {2, 2}, {2, 3}, {2, 4} },
  { {3, 0}, {3, 1}, {3, 2} }, { {3, 1}, {3, 2}, {3, 3} }, { {3, 2}, {3, 3}, {3, 4} },
  { {4, 0}, {4, 1}, {4, 2} }, { {4, 1}, {4, 2}, {4, 3} }, { {4, 2}, {4, 3}, {4, 4} },
  { {0, 0}, {1, 0}, {2, 0} }, { {1, 0}, {2, 0}, {3, 0} }, { {2, 0}, {3, 0}, {4, 0} },
  { {0, 1}, {1, 1}, {2, 1} }, { {1, 1}, {2, 1}, {3, 1} }, { {2, 1}, {3, 1}, {4, 1} },
  { {0, 2}, {1, 2}, {2, 2} }, { {1, 2}, {2, 2}, {3, 2} }, { {2, 2}, {3, 2}, {4, 2} },
  { {0, 3}, {1, 3}, {2, 3} }, { {1, 3}, {2, 3}, {3, 3} }, { {2, 3}, {3, 3}, {4, 3} },
  { {0, 4}, {1, 4}, {2, 4} }, { {1, 4}, {2, 4}, {3, 4} }, { {2, 4}, {3, 4}, {4, 4} },
  { {0, 2}, {1, 3}, {2, 4} }, { {0, 1}, {1, 2}, {2, 3} }, { {1, 2}, {2, 3}, {3, 4} },
  { {0, 0}, {1, 1}, {2, 2} }, { {1, 1}, {2, 2}, {3, 3} }, { {2, 2}, {3, 3}, {4, 4} },
  { {1, 0}, {2, 1}, {3, 2} }, { {2, 1}, {3, 2}, {4, 3} }, { {2, 0}, {3, 1}, {4, 2} },
  { {0, 2}, {1, 1}, {2, 0} }, { {0, 3}, {1, 2}, {2, 1} }, { {1, 2}, {2, 1}, {3, 0} },
  { {0, 4}, {1, 3}, {2, 2} }, { {1, 3}, {2, 2}, {3, 1} }, { {2, 2}, {3, 1}, {4, 0} },
  { {1, 4}, {2, 3}, {3, 2} }, { {2, 3}, {3, 2}, {4, 1} }, { {2, 4}, {3, 3}, {4, 2} }
};

inline bool winCheck(int player) {
  bool w = false;
  for (int i = 0; i < 28; i++)
    if ( (board[win[i][0][0]][win[i][0][1]] == player) &&
         (board[win[i][1][0]][win[i][1][1]] == player) &&
         (board[win[i][2][0]][win[i][2][1]] == player) &&
         (board[win[i][3][0]][win[i][3][1]] == player) )
      w = true;
  return w;
}

inline bool loseCheck(int player) {
  bool l = false;
  for (int i = 0; i < 48; i++)
    if ( (board[lose[i][0][0]][lose[i][0][1]] == player) &&
         (board[lose[i][1][0]][lose[i][1][1]] == player) &&
         (board[lose[i][2][0]][lose[i][2][1]] == player) )
      l = true;
  return l;
}

inline int evaluate_board() {
  int score = 0;
  for(int i = 0; i < 28; i++) {
    short X = 0, O = 0;
    for(int j = 0; j < 4; j++) {
      if(board[win[i][j][0]][win[i][j][1]] == 1) X += 1;
      if(board[win[i][j][0]][win[i][j][1]] == 2) O += 1;
    }
    score += (X && !O) ? X : ((!X && O) ? -O : 0);
  }
  return score;
}

const std::string SYMBOLS[] = {
    " ",
    "\033[1;96m⨉\033[0m",
    "\033[1;93m◯\033[0m"
};
const int BOARD_SIZE = 5;

void printBoard(short board[BOARD_SIZE][BOARD_SIZE]){
    std::cout << "\n" << "\033[90m┏";
    for (int i = 0; i < BOARD_SIZE - 1; ++i){
        std::cout << "━━━┳";
    }
    std::cout << "━━━┓\033[0m" << std::endl;

    for (int row = 0; row < BOARD_SIZE; ++row){
        std::cout << "\033[90m┃\033[0m";
        for (int col = 0; col < BOARD_SIZE; ++col){
            std::cout << " " << SYMBOLS[board[row][col]] << " \033[90m┃\033[0m";
        }
        std::cout << std::endl;

        if (row < BOARD_SIZE - 1){
            std::cout << "\033[90m┣";
            for (int i = 0; i < BOARD_SIZE - 1; ++i){
                std::cout << "━━━╋";
            }
            std::cout << "━━━┫\033[0m" << std::endl;
        } else {
            std::cout << "\033[90m┗";
            for (int i = 0; i < BOARD_SIZE - 1; ++i){
                std::cout << "━━━┻";
            }
            std::cout << "━━━┛\033[0m" << std::endl;
        }
    }
}

#endif // BOARD_HPP